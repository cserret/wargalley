version: '3'
services:
  # Define the Flask web application
  flaskapp:
    # Build the Dockerfile that is in the web directory
    #build: ./web
    image: cserret/cryptozoology:flaskapp
    # Always restart the container regardless of the exit status; try and restart the container indefinitely
    restart: always
     # Expose port 8000 to other containers (not to the host of the machine)
    expose:
      - "8000"
    # Mount the web directory within the container at /home/flask/app/web
    volumes:
      - ./web:/home/cryptozoology/app/web
    # Don't create this container until the redis and postgres containers (below) have been created
    depends_on:
      - redis
      #- postgres
    # Link the redis and postgres containers together so that they can talk to one another
    links:
      - redis
      #- postgres
    # Pass environment variables to the flask container (this debug level lets you see more useful information)
    environment:
      FLASK_DEBUG: 1

  # Define the redis Docker container
  redis:
    # use the redis:alpine image: https://hub.docker.com/_/redis/
    image: cserret/cryptozoology:redis
    restart: always

  # Define the redis NGINX forward proxy container
  nginx:
    # build the nginx Dockerfile: http://bit.ly/2kuYaIv
    image: cserret/cryptozoology:nginx
    restart: always
    # Expose port 80 to the host machine
    ports:
      - "80:80"
    # The Flask application needs to be available for NGINX to make successful proxy requests
    depends_on:
      - flaskapp

  pgadmin4:
    image: cserret/cryptozoology:pgadmin4
    ports:
      - 81:80
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@localhost
      PGADMIN_DEFAULT_PASSWORD: halibut


  frontend:
    image: cserret/cryptozoology:frontend
    command: ["npm", "start"]
    ports:
      - "3001:3000"
    depends_on: 
      - flaskapp     

